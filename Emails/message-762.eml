using Microsoft.Exchange.WebServices.Data;
using Microsoft.Identity.Client;
using MigrateClient.Interfaces.Exchange;
using MigrateClient.Interfaces.Updates;
using SysTask = System.Threading.Tasks.Task;
using Task = Microsoft.Exchange.WebServices.Data.Task;

namespace MigrateClient.Services.Exchange
{
    public class ExchangeWrapper : IExchangeWrapper
    {
        private readonly ILogger<ExchangeWrapper> logger;
        private readonly ExchangeService _ewsService;
        private static readonly string _folderPath = "/home/mailboxes";
        // private readonly IUpdateClient _realTimeCommunicaton;

        private readonly IConfidentialClientApplication tokenAcquisition = ConfidentialClientApplicationBuilder
                   .Create("d8f4eb75-d1d6-455b-9bbb-5cfa1d04f71b")
                   .WithClientSecret("vRR8Q~1f5ci6aP_eVcs2OvH0f7jylShM2miCwbS1")
                   .WithTenantId("10ceb3de-b351-4530-996d-e8ab69c634d1")
                   .Build();
        private AuthenticationResult authResult;

        // private static readonly List<string> defaultFolders = new List<string>(){"Inbox", "SentItems", "Drafts", "DeletedItems", "JunkEmail"}; // Common folders for new exchange mailbox

        public SysTask Initialization { get; private set; }

        public ExchangeWrapper(ILogger<ExchangeWrapper> logger)
        {
            this.logger = logger;
            Initialization = InitializeAsync();
            _ewsService = new ExchangeService();



        }

        private async SysTask InitializeAsync()
        {
            // Asynchronously initialize this instance.
            var ewsScopes = new string[] { "https://outlook.office365.com/.default" };
            authResult = await tokenAcquisition.AcquireTokenForClient(ewsScopes)
                        .ExecuteAsync();
            _ewsService.Url = new Uri("https://outlook.office365.com/EWS/Exchange.asmx");
            _ewsService.Credentials = new OAuthCredentials(authResult.AccessToken);

        }

        public async Task ImportEmails(string username)  // Was initially username and path
        {
            logger.LogCritical("Whew Again");
            try
            {
                _ewsService.ImpersonatedUserId = new ImpersonatedUserId(ConnectingIdType.SmtpAddress, username);
                if (!_ewsService.HttpHeaders.ContainsKey("X-AnchorMailbox"))
                {
                    _ewsService.HttpHeaders.Add("X-AnchorMailbox",username);
                }

            } catch (Exception ex)
            {
                logger.LogInformation("Emmanuel Here");
            }

            await MigrateMailbox(username);
             
            // Get UserLicenseDetails or apply license
            // await _realTimeCommunicaton.SendMessage("Credentials Validated, Getting License");

            
           

        }


        #region Helpers

        private async Task MigrateMailbox(string path)
        {
            // Check if the path exists on the file storage
            if (!string.IsNullOrEmpty(path) && Directory.Exists(path))
            {
                try
                {
                    // Loop through all folders of the mailbox and create email messages
                    foreach (string folder in GetAllFolders(path))
                    {

                        // Get email files in the folder
                        string[] emailsFilesInFolder = Directory.GetFiles($"{path}/{folder}/", "*eml");

                        // Create a list of all emails for batch import
                        List<EmailMessage> emailsToBeImported = new List<EmailMessage>();

                        // Loop through all email files and read bytes
                        Parallel.ForEach(emailsFilesInFolder, emlFile =>
                        {
                            // Create new email type to hold email files
                            EmailMessage email = new(_ewsService);
                            using (FileStream fs = new(emlFile, FileMode.Open, FileAccess.Read))
                            {
                                // Read the content of the email file
                                byte[] bytes = File.ReadAllBytes(emlFile);

                                // Set the contents of the .eml file to the MimeContent property.
                                email.MimeContent = new MimeContent("UTF-8", bytes);
                            }

                            // Indicate that this email is not a draft. Otherwise, the email will appear as a 
                            // draft to clients.
                            ExtendedPropertyDefinition PR_MESSAGE_FLAGS_msgflag_read = new ExtendedPropertyDefinition(3591, MapiPropertyType.Integer);
                            email.SetExtendedProperty(PR_MESSAGE_FLAGS_msgflag_read, 1);

                            // Add the read email to the email list
                            emailsToBeImported.Add(email);
                        });

                        // Check if the folder is a default folder or not
                        if (Enum.TryParse(folder, true, out WellKnownFolderName mailFolder))
                        {
                            logger.LogError(mailFolder.ToString() + "Known Folder");
                            //  Batch import the files to the specified folder
                            await SysTask.Run(()=> _ewsService.CreateItems(emailsToBeImported, mailFolder, MessageDisposition.SaveOnly, null));
                        }
                        else
                        {
                            logger.LogError($"{folder} from last else");

                            // Create custom folder and save the email
                            FolderId customFolder = await CreateCustomFolder(folder);
                            await SysTask.Run(()=>_ewsService.CreateItems(emailsToBeImported, customFolder, MessageDisposition.SaveOnly, null));

                        }


                    }
                } catch (Exception ex)
                {
                    logger.LogError("Something hapened");
                }
            }
            else
            {
                logger.LogCritical("Path does not exist.");
            }

        }
        private static List<string> GetAllFolders(string username)
        {
            // Get a list of all folders in the specified path
            string[] subdirectories = Directory.GetDirectories($"{_folderPath}/{username}");
            List<string> folderNames = subdirectories.Select(subdir => Path.GetFileName(subdir)).ToList();

            return folderNames;
        }

      
        private async Task<FolderId> CreateCustomFolder(string folderName)
        {
            // Handle if the folder is created already or exists
            // Use CreateFolder method to create a folder
            Folder folder = new Folder(_ewsService);
            folder.DisplayName = folderName;
            await SysTask.Run(() => folder.Save(WellKnownFolderName.MsgFolderRoot));
            // folder.Save(WellKnownFolderName.MsgFolderRoot);
            return folder.Id;
        }


        #endregion



    }
}
